{"ast":null,"code":"var _jsxFileName = \"/home/udimkpa/Documents/final-project-app-dev/client/src/charts/D3Chart.js\";\nimport axios from 'axios';\nimport * as d3 from 'd3';\nimport React, { useContext } from 'react';\n// import { SessionContext } from '../contexts/SessionContext';\n// import { BudgetDisplayContext } from '../contexts/BudgetDisplayContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction D3Chart() {\n  /*\n  function getData() {\n    axios.get('http://localhost:3010/display')\n    .then(function (res) {\n        console.log(res.data[1]);\n        console.log(res.data[2]);\n        console.log(res.data[3]);\n         var svg = d3.select(\"body\")\n        .append(\"svg\")\n        .append(\"g\")\n         svg.append(\"g\")\n            .attr(\"class\", \"slices\");\n        svg.append(\"g\")\n            .attr(\"class\", \"labels\");\n        svg.append(\"g\")\n            .attr(\"class\", \"lines\");\n    \n        var width = 960,\n            height = 450,\n            radius = Math.min(width, height) / 2;\n    \n        var pie = d3.layout.pie()\n            .sort(null)\n            .value(function(d) {\n                return d.value;\n            });\n    \n        var arc = d3.svg.arc()\n            .outerRadius(radius * 0.8)\n            .innerRadius(radius * 0.4);\n    \n        var outerArc = d3.svg.arc()\n            .innerRadius(radius * 0.9)\n            .outerRadius(radius * 0.9);\n    \n        svg.attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n    \n        var key = function(d){ return d.data.label; };\n        \n        var color = d3.scale.ordinal()\n        .domain(res.data[1])\n        .range(res.data[2]);\n    \n        console.log(color);\n        \n        function startData (){\n            var labels = color.domain();\n            return labels.map((label, index) => {\n                return { label: label, value: res.data[3][index] } // --- JSON.parse(sessionStorage.getItem('amount'))[index]\n            });\n        }\n        change(startData());\n    \n        function randomData (){\n            var labels = color.domain();\n            return labels.map(function(label){\n                return { label: label, value: Math.random() }\n            });\n        }\n        // --- change(randomData());\n    \n        d3.select(\".randomize\")\n            .on(\"click\", function(){\n                // -- getColor();\n                change(randomData());\n            });\n        \n        d3.select(\".reset\")\n            .on(\"click\", function(){\n                // -- getColor();\n                change(startData());\n            });\n         function change(data) {\n             // ------- PIE SLICES -------\n            var slice = svg.select(\".slices\").selectAll(\"path.slice\")\n                .data(pie(data), key);\n    \n            slice.enter()\n                .insert(\"path\")\n                .style(\"fill\", function(d) { return color(d.data.label); })\n                .attr(\"class\", \"slice\");\n    \n            slice\t\t\n                .transition().duration(1000)\n                .attrTween(\"d\", function(d) {\n                    this._current = this._current || d;\n                    var interpolate = d3.interpolate(this._current, d);\n                    this._current = interpolate(0);\n                    return function(t) {\n                        return arc(interpolate(t));\n                    };\n                })\n    \n            slice.exit()\n                .remove();\n    \n            // ------- TEXT LABELS -------\n    \n            var text = svg.select(\".labels\").selectAll(\"text\")\n                .data(pie(data), key);\n    \n            text.enter()\n                .append(\"text\")\n                .attr(\"dy\", \".35em\")\n                .text(function(d) {\n                    return d.data.label;\n                });\n            \n            function midAngle(d){\n                return d.startAngle + (d.endAngle - d.startAngle)/2;\n            }\n    \n            text.transition().duration(1000)\n                .attrTween(\"transform\", function(d) {\n                    this._current = this._current || d;\n                    var interpolate = d3.interpolate(this._current, d);\n                    this._current = interpolate(0);\n                    return function(t) {\n                        var d2 = interpolate(t);\n                        var pos = outerArc.centroid(d2);\n                        pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);\n                        return \"translate(\"+ pos +\")\";\n                    };\n                })\n                .styleTween(\"text-anchor\", function(d){\n                    this._current = this._current || d;\n                    var interpolate = d3.interpolate(this._current, d);\n                    this._current = interpolate(0);\n                    return function(t) {\n                        var d2 = interpolate(t);\n                        return midAngle(d2) < Math.PI ? \"start\":\"end\";\n                    };\n                });\n    \n            text.exit()\n                .remove();\n    \n            // ------- SLICE TO TEXT POLYLINES -------\n    \n            var polyline = svg.select(\".lines\").selectAll(\"polyline\")\n                .data(pie(data), key);\n            \n            polyline.enter()\n                .append(\"polyline\");\n    \n            polyline.transition().duration(1000)\n                .attrTween(\"points\", function(d){\n                    this._current = this._current || d;\n                    var interpolate = d3.interpolate(this._current, d);\n                    this._current = interpolate(0);\n                    return function(t) {\n                        var d2 = interpolate(t);\n                        var pos = outerArc.centroid(d2);\n                        pos[0] = radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);\n                        return [arc.centroid(d2), outerArc.centroid(d2), pos];\n                    };\t\t\t\n                });\n            \n            polyline.exit()\n                .remove();\n        };\n    });\n  };\n  /**/\n  // getData();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"d3-pie-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n}\n_c = D3Chart;\nexport default D3Chart;\nvar _c;\n$RefreshReg$(_c, \"D3Chart\");","map":{"version":3,"names":["axios","d3","React","useContext","jsxDEV","_jsxDEV","D3Chart","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/udimkpa/Documents/final-project-app-dev/client/src/charts/D3Chart.js"],"sourcesContent":["import axios from 'axios';\nimport * as d3 from 'd3';\nimport React, { useContext } from 'react';\n// import { SessionContext } from '../contexts/SessionContext';\n// import { BudgetDisplayContext } from '../contexts/BudgetDisplayContext';\n\nfunction D3Chart() {\n  /*\n  function getData() {\n    axios.get('http://localhost:3010/display')\n    .then(function (res) {\n        console.log(res.data[1]);\n        console.log(res.data[2]);\n        console.log(res.data[3]);\n\n        var svg = d3.select(\"body\")\n        .append(\"svg\")\n        .append(\"g\")\n\n        svg.append(\"g\")\n            .attr(\"class\", \"slices\");\n        svg.append(\"g\")\n            .attr(\"class\", \"labels\");\n        svg.append(\"g\")\n            .attr(\"class\", \"lines\");\n    \n        var width = 960,\n            height = 450,\n            radius = Math.min(width, height) / 2;\n    \n        var pie = d3.layout.pie()\n            .sort(null)\n            .value(function(d) {\n                return d.value;\n            });\n    \n        var arc = d3.svg.arc()\n            .outerRadius(radius * 0.8)\n            .innerRadius(radius * 0.4);\n    \n        var outerArc = d3.svg.arc()\n            .innerRadius(radius * 0.9)\n            .outerRadius(radius * 0.9);\n    \n        svg.attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n    \n        var key = function(d){ return d.data.label; };\n        \n        var color = d3.scale.ordinal()\n        .domain(res.data[1])\n        .range(res.data[2]);\n    \n        console.log(color);\n        \n        function startData (){\n            var labels = color.domain();\n            return labels.map((label, index) => {\n                return { label: label, value: res.data[3][index] } // --- JSON.parse(sessionStorage.getItem('amount'))[index]\n            });\n        }\n        change(startData());\n    \n        function randomData (){\n            var labels = color.domain();\n            return labels.map(function(label){\n                return { label: label, value: Math.random() }\n            });\n        }\n        // --- change(randomData());\n    \n        d3.select(\".randomize\")\n            .on(\"click\", function(){\n                // -- getColor();\n                change(randomData());\n            });\n        \n        d3.select(\".reset\")\n            .on(\"click\", function(){\n                // -- getColor();\n                change(startData());\n            });\n\n        function change(data) {\n\n            // ------- PIE SLICES -------\n            var slice = svg.select(\".slices\").selectAll(\"path.slice\")\n                .data(pie(data), key);\n    \n            slice.enter()\n                .insert(\"path\")\n                .style(\"fill\", function(d) { return color(d.data.label); })\n                .attr(\"class\", \"slice\");\n    \n            slice\t\t\n                .transition().duration(1000)\n                .attrTween(\"d\", function(d) {\n                    this._current = this._current || d;\n                    var interpolate = d3.interpolate(this._current, d);\n                    this._current = interpolate(0);\n                    return function(t) {\n                        return arc(interpolate(t));\n                    };\n                })\n    \n            slice.exit()\n                .remove();\n    \n            // ------- TEXT LABELS -------\n    \n            var text = svg.select(\".labels\").selectAll(\"text\")\n                .data(pie(data), key);\n    \n            text.enter()\n                .append(\"text\")\n                .attr(\"dy\", \".35em\")\n                .text(function(d) {\n                    return d.data.label;\n                });\n            \n            function midAngle(d){\n                return d.startAngle + (d.endAngle - d.startAngle)/2;\n            }\n    \n            text.transition().duration(1000)\n                .attrTween(\"transform\", function(d) {\n                    this._current = this._current || d;\n                    var interpolate = d3.interpolate(this._current, d);\n                    this._current = interpolate(0);\n                    return function(t) {\n                        var d2 = interpolate(t);\n                        var pos = outerArc.centroid(d2);\n                        pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);\n                        return \"translate(\"+ pos +\")\";\n                    };\n                })\n                .styleTween(\"text-anchor\", function(d){\n                    this._current = this._current || d;\n                    var interpolate = d3.interpolate(this._current, d);\n                    this._current = interpolate(0);\n                    return function(t) {\n                        var d2 = interpolate(t);\n                        return midAngle(d2) < Math.PI ? \"start\":\"end\";\n                    };\n                });\n    \n            text.exit()\n                .remove();\n    \n            // ------- SLICE TO TEXT POLYLINES -------\n    \n            var polyline = svg.select(\".lines\").selectAll(\"polyline\")\n                .data(pie(data), key);\n            \n            polyline.enter()\n                .append(\"polyline\");\n    \n            polyline.transition().duration(1000)\n                .attrTween(\"points\", function(d){\n                    this._current = this._current || d;\n                    var interpolate = d3.interpolate(this._current, d);\n                    this._current = interpolate(0);\n                    return function(t) {\n                        var d2 = interpolate(t);\n                        var pos = outerArc.centroid(d2);\n                        pos[0] = radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);\n                        return [arc.centroid(d2), outerArc.centroid(d2), pos];\n                    };\t\t\t\n                });\n            \n            polyline.exit()\n                .remove();\n        };\n    });\n  };\n  /**/\n// getData();\n\n  return (\n    <div id=\"d3-pie-container\"/>\n  );\n}\n\n\nexport default D3Chart;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,OAAOC,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,OAAOA,CAAA,EAAG;EACjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAKA;;EAEE,oBACED,OAAA;IAAKE,EAAE,EAAC;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAEhC;AAACC,EAAA,GA9KQN,OAAO;AAiLhB,eAAeA,OAAO;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}